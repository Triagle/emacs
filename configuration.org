#+TITLE: Emacs Configuration

* Setup
=use-package= requires being loaded nice and early in the configuration.
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC

For the melpa.org packages
#+BEGIN_SRC emacs-lisp
  ;; Weird ass workaround because emacs is funny.
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		      (not (gnutls-available-p))))
	 (proto (if no-ssl "http" "https")))
    (when no-ssl
      (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
  (package-initialize)
#+END_SRC

Move any custom file stuff to custom.el
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
#+END_SRC
* UI
Remove the initial junk emacs likes to load.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

Set the current theme to goodness.
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-dracula t))
#+END_SRC

Doom Modeline ughh.

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))
#+END_SRC

Set current font.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
	       '(font . "Iosevka-10"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-startup-banner 'logo)
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :config
    (popwin-mode 1)
    (push "*Python*" popwin:special-display-config)
    (push "*Flycheck errors*" popwin:special-display-config))
#+END_SRC

* Evil Mode

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
#+END_SRC

General.el for keybinds.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :demand
    :config
    (general-evil-setup)
    (general-create-definer leader-define :prefix "SPC" :states 'normal)
    (general-create-definer local-define :prefix "SPC m" :states 'normal)

    (leader-define
      ;; Code
      "cl" 'comment-line
      ;; Window keybinds
      "w C-o" 'delete-other-windows
      "wo" 'other-window
      "wv" 'split-window-vertically
      "w-" 'split-window-horizontally
      "wl" 'evil-window-right
      "wh" 'evil-window-left
      "wk" 'evil-window-up
      "wj" 'evil-window-down
      "wq" 'delete-window

      ;; Quit
      "qq" 'save-buffers-kill-emacs

      ;; File keybinds
      "fs" 'save-buffer
      "fd" 'dired
      "fr" 'counsel-recentf

      ;; Buffer
      "bb" 'counsel-switch-buffer
      "bk" 'kill-buffer))

  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Evil snipe for some quicc scoping of words.

#+BEGIN_SRC emacs-lisp
  (use-package evil-snipe
    :ensure t
    :config
    (evil-snipe-mode)
    (evil-snipe-override-mode))
#+END_SRC

Avy for more jump-foo
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :general
    (general-nmap
      "gl" 'avy-goto-line
      "gc" 'avy-goto-char-timer))
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (ivy-mode))

  (use-package counsel
    :general
    (leader-define
		   ":" 'counsel-M-x
		   "." 'counsel-find-file
		   "si" 'counsel-imenu
		   "s/" 'counsel-projectile-grep)
    :config
    (counsel-mode))

  (use-package swiper
    :general
    (leader-define
      "ss" 'swiper))
#+END_SRC
* Tools
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :general
    (leader-define
      "gs" 'magit-status))

  (use-package evil-magit)
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode))

  (use-package counsel-projectile
    :general
    (leader-define
      "SPC" 'counsel-projectile-find-file)
    :after projectile)
#+END_SRC
** COMMENT Zoom
#+BEGIN_SRC emacs-lisp
  (use-package zoom
    :init
    (setq zoom-size '(0.618 . 0.618))
    :config
    (zoom-mode))
#+END_SRC
* Programming Languages
** Snippets
Note you should also install the =yasnippet-snippets= package for extra snippets.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config (yas-global-mode 1))
#+END_SRC
** LSP
Language server is a language agnoistic backend that provides syntax checking and completeions. Certain languages require external tools, e.g
- Python :: Use the [[https://github.com/palantir/python-language-server][Python Language Server]].
#+BEGIN_SRC emacs-lisp
  ;; Prerequistites: Company and Flycheck

  (use-package company
    :hook (after-init . global-company-mode))
  (use-package flycheck
    :hook (after-init . global-flycheck-mode)
    :general
    (leader-define
      "cx" 'flycheck-list-errors))

  (use-package lsp
    :ensure lsp-mode
    :config
    (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
    :init
    (setq lsp-auto-guess-root t)
    (setq lsp-inhibit-message t))

  (use-package lsp-ui
    :init
    (add-hook 'lsp-mode-hook #'lsp-ui-sideline-mode))

  (use-package company-lsp
    :after company
    :config
    (push 'company-lsp company-backends))
#+END_SRC
** REPL
#+BEGIN_SRC emacs-lisp
  (setq repl-handler '())

  (defun add-repl-handler (mode repl)
    (push (cons mode repl) repl-handler))

  (defun repl ()
    "Open repl for current major mode"
    (interactive)
    (call-interactively (cdr (assoc major-mode repl-handler))))

#+END_SRC
** Formatting
Formatting usually requires language specific binaries, see [[https://github.com/emacsmirror/format-all][the readme]] for more info.

#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :config
    (format-all-mode))
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-mode))
#+END_SRC
** Documentation
#+BEGIN_SRC emacs-lisp
  (use-package counsel-dash
    :init
    (defalias 'remove-duplicates 'cl-remove-duplicates)
    :config
    (setq counsel-dash-browser-func 'browse-url-firefox)
    (defalias 'doc 'counsel-dash))

  (use-package dumb-jump
    :general
    (general-nmap
      "gd" 'dumb-jump-go))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (add-repl-handler 'python-mode #'run-python)
  (add-hook 'python-mode-hook #'lsp)
  (add-hook 'python-mode-hook #'format-all-mode)
  (add-hook 'python-mode-hook #'(lambda () (setq-local counsel-dash-docsets '("Python 3"))))
#+END_SRC

Pipenv.el uses =pipenv= to manage python environments.

#+BEGIN_SRC emacs-lisp
  (use-package pipenv
    :hook (python-mode . pipenv-mode)
    :init
    (setq
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended))
#+END_SRC
** C/C++
#+BEGIN_SRC emacs-lisp
  (use-package ccls
    :hook ((c-mode c++-mode objc-mode) . (lambda () (require 'ccls) (lsp))))

  (add-hook 'c-mode-hook #'format-all-mode)
  (add-hook 'c-mode-hook #'(lambda () (setq-local counsel-dash-doscsets '("C"))))
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)

  (use-package lsp-haskell
    :config
    (add-hook 'haskell-mode-hook #'lsp))

  (use-package haskell-snippets)
#+END_SRC
* Misc
** Backups
#+BEGIN_SRC emacs-lisp
  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.saves/"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups
#+END_SRC
